// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Repository.Data;

#nullable disable

namespace Repository.Data.Migrations
{
    [DbContext(typeof(StoreContext))]
    [Migration("20250521180116_IntaialMigrations")]
    partial class IntaialMigrations
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Core.Entities.Attendance_T", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<bool>("Atten")
                        .HasColumnType("bit");

                    b.Property<int>("LectureID")
                        .HasColumnType("int");

                    b.Property<int>("St_ID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("LectureID");

                    b.ToTable("Attendance");
                });

            modelBuilder.Entity("Core.Entities.Doctors", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Dr_Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Dr_Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Dr_Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Dr_NameAr")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Dr_NameEn")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Doctors");
                });

            modelBuilder.Entity("Core.Entities.Faculty", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Fac_Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Fac_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Faculty");
                });

            modelBuilder.Entity("Core.Entities.FacultyYear", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("Fac_ID")
                        .HasColumnType("int");

                    b.Property<string>("Year")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("Fac_ID");

                    b.ToTable("FacultyYear");
                });

            modelBuilder.Entity("Core.Entities.FacultyYearSemister", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("FacYear_Id")
                        .HasColumnType("int");

                    b.Property<string>("Sem_Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sem_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("FacYear_Id");

                    b.ToTable("FacultyYearSemister");
                });

            modelBuilder.Entity("Core.Entities.Instructors", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Ins_Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ins_NameAr")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ins_NameEn")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Instructors");
                });

            modelBuilder.Entity("Core.Entities.Lecture_S", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("Degree")
                        .HasColumnType("int");

                    b.Property<DateTime>("LectureDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Lecture_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Sub_ID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("Sub_ID");

                    b.ToTable("Lecture");
                });

            modelBuilder.Entity("Core.Entities.Rooms", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Room_Num")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Rooms");
                });

            modelBuilder.Entity("Core.Entities.Students", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("FacYearSem_ID")
                        .HasColumnType("int");

                    b.Property<int>("Fac_ID")
                        .HasColumnType("int");

                    b.Property<int?>("FingerID")
                        .HasColumnType("int");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("St_Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("St_Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("St_Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("St_NameAr")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("St_NameEn")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("FacYearSem_ID");

                    b.HasIndex("Fac_ID");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("Core.Entities.Studets_Rooms_Subject", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("Room_ID")
                        .HasColumnType("int");

                    b.Property<int>("St_ID")
                        .HasColumnType("int");

                    b.Property<int>("Sub_ID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("Room_ID");

                    b.HasIndex("St_ID");

                    b.HasIndex("Sub_ID");

                    b.ToTable("Studets_Rooms_Subject");
                });

            modelBuilder.Entity("Core.Entities.Subjects", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("Dr_ID")
                        .HasColumnType("int");

                    b.Property<int>("FacYearSem_ID")
                        .HasColumnType("int");

                    b.Property<int>("Ins_ID")
                        .HasColumnType("int");

                    b.Property<string>("Sub_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("Dr_ID");

                    b.HasIndex("FacYearSem_ID");

                    b.HasIndex("Ins_ID");

                    b.ToTable("Subjects");
                });

            modelBuilder.Entity("Core.FingerId.SensorData", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.ToTable("SensorData");
                });

            modelBuilder.Entity("Core.Entities.Attendance_T", b =>
                {
                    b.HasOne("Core.Entities.Lecture_S", "Lecture")
                        .WithMany()
                        .HasForeignKey("LectureID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lecture");
                });

            modelBuilder.Entity("Core.Entities.FacultyYear", b =>
                {
                    b.HasOne("Core.Entities.Faculty", "Faculty")
                        .WithMany()
                        .HasForeignKey("Fac_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Faculty");
                });

            modelBuilder.Entity("Core.Entities.FacultyYearSemister", b =>
                {
                    b.HasOne("Core.Entities.FacultyYear", "FacultyYear")
                        .WithMany()
                        .HasForeignKey("FacYear_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FacultyYear");
                });

            modelBuilder.Entity("Core.Entities.Lecture_S", b =>
                {
                    b.HasOne("Core.Entities.Subjects", "Subjects")
                        .WithMany()
                        .HasForeignKey("Sub_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subjects");
                });

            modelBuilder.Entity("Core.Entities.Students", b =>
                {
                    b.HasOne("Core.Entities.FacultyYearSemister", "FacultyYearSemister")
                        .WithMany()
                        .HasForeignKey("FacYearSem_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Faculty", "Faculty")
                        .WithMany()
                        .HasForeignKey("Fac_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Faculty");

                    b.Navigation("FacultyYearSemister");
                });

            modelBuilder.Entity("Core.Entities.Studets_Rooms_Subject", b =>
                {
                    b.HasOne("Core.Entities.Rooms", "Rooms")
                        .WithMany("StudentRooms")
                        .HasForeignKey("Room_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Students", "Students")
                        .WithMany("StudentRooms")
                        .HasForeignKey("St_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Subjects", "Subjects")
                        .WithMany("StudentRooms")
                        .HasForeignKey("Sub_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Rooms");

                    b.Navigation("Students");

                    b.Navigation("Subjects");
                });

            modelBuilder.Entity("Core.Entities.Subjects", b =>
                {
                    b.HasOne("Core.Entities.Doctors", "Doctors")
                        .WithMany()
                        .HasForeignKey("Dr_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.FacultyYearSemister", "FacultyYearSemister")
                        .WithMany()
                        .HasForeignKey("FacYearSem_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Instructors", "Instructors")
                        .WithMany()
                        .HasForeignKey("Ins_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctors");

                    b.Navigation("FacultyYearSemister");

                    b.Navigation("Instructors");
                });

            modelBuilder.Entity("Core.Entities.Rooms", b =>
                {
                    b.Navigation("StudentRooms");
                });

            modelBuilder.Entity("Core.Entities.Students", b =>
                {
                    b.Navigation("StudentRooms");
                });

            modelBuilder.Entity("Core.Entities.Subjects", b =>
                {
                    b.Navigation("StudentRooms");
                });
#pragma warning restore 612, 618
        }
    }
}
